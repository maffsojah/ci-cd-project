version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Destroy backend environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-<<parameters.workflow_id>>
      - run:
          name: Destroy the frontend environments
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-<<parameters.workflow_id>> --recursive && \
            aws cloudformation delete-stack --stack-name udapeople-frontend-<<parameters.workflow_id>>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
        type: string     
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure https://kvdb.io/HudNfC6a4RCQe5hVCUjqfK/migration_<< parameters.workflow_id >>)
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi
  
jobs:
  build-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend && npm install && npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend && npm install && npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run frontend tests
          command: |
            cd frontend && npm install && npm run test
  
  test-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run backend tests
          command: |
            cd backend && npm install && npm run test

  scan-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Analyze frontend packages for vulnerabilities
          command: |
            cd frontend && npm install && \
            npm audit fix --audit-level=critical --force && \
            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Analyze backend packages for vulnerabilities
          command: |
            cd backend && npm install && \
            npm audit fix --audit-level=critical --force && \
            npm audit fix --force && \
            npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar and gzip
          command: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=terry-udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=terry-udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=terry-udapeople" \
              --output text >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  configure-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["3c:7d:40:74:8c:f9:35:1e:c2:5f:11:bc:59:56:0e:c7"]
      - run:
          name: Install dependencies
          command: |
            yum update -y && yum install -y python3 curl tar gzip && \
            curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py && \
            python3 get-pip.py --user && \
            python3 -m pip install --user ansible
      - attach_workspace:
          at: ~/
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible \
            ansible-playbook -i inventory.txt configure-server.yml
      - run:
          name: Setup Monitoring with Prometheus and node_exporter
          command: |
            cd .circleci/ansible \
            ansible-playbook -i inventory.txt configure-prometheus-node-exporter.yml
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  run-migrations:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run --force migrations > migrations_dump.txt
            cat migrations_dump.txt
      - run:
          name: Send migration results to kvdb.io
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl https://kvdb.io/HudNfC6a4RCQe5hVCUjqfK/migration_${CIRCLE_WORKFLOW_ID:0:7} -d '1'
            fi
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum update -y && yum install -y python3 curl tar gzip && \
            curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py && \
            python3 get-pip.py --user && \
            python3 -m pip install --user ansible
      - run:
          name: Install NodeJS & NPM
          command: |
            curl --silent --location https://rpm.nodesource.com/setup_14.x | bash -
            yum install -y nodejs
            node --version
            npm --version
      - attach_workspace:
          at: ~/
      - run:
          name: Get backend url
          command: |
            aws --version
            echo "******* Checking EC2 IP ********"
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=terry-udapeople" \
              --output text >> ip.txt
            echo "******* Done Checking EC2 IP ********"
            export BACKEND_IP=$(cat ip.txt)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL = "http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}   
    
  deploy-backend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["3c:7d:40:74:8c:f9:35:1e:c2:5f:11:bc:59:56:0e:c7"]
      - run:
          name: Install dependencies
          command: |
            yum update -y && yum install -y python3 curl tar gzip openssh-clients && \
            curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py && \
            python3 get-pip.py --user
      - run:
          name: Install NodeJS & NPM
          command: |
            curl --silent --location https://rpm.nodesource.com/setup_14.x | bash -
            yum install -y nodejs
            node --version
            npm --version
      - attach_workspace:
          at: ~/
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            tar -C backend -czvf artifact.tar.gz .
            mkdir ~/project/.circleci/ansible/roles/deploy/files
            cp artifact.tar.gz ~/project/.circleci/ansible/roles/deploy/files
            echo "**** FILES WORKING DIRECTORY ****"
            cd ~/project/.circleci/ansible/roles/deploy/files
            pwd
            echo "**** ls in root DIR ****"
            ls -l
      - run:
          name: Deploy backend with Ansible
          command: |
            python3 -m pip install --user ansible
            export PATH=$PATH:~/.local/bin
            ansible --version
            cd .circleci/ansible
            echo "Contents os the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7} 

  smoke-test:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum update -y && yum install -y curl tar gzip
            curl --silent --location https://rpm.nodesource.com/setup_14.x | bash -
            yum install -y nodejs
      - attach_workspace:
          at: ~/
      - run:
          name: Get backend url
          command: |
            echo "******* Checking EC2 IP ********"
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=terry-udapeople" \
              --output text >> ip.txt
            cat ip.txt
      - run:
          name: Backend smoke test.
          command: |
            export BACKEND_IP=$(cat ip.txt)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
              exit 0
            else
              exit 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"
            echo ${URL}
            if curl -s ${URL} | grep "Welcome"
            then
              exit 0
            else
              exit 1
            fi
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}  

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip
      - attach_workspace:
          at: ~/
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name InitialStack \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7} 

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip
      - attach_workspace:
          at: ~/
      - run:
          name: Get old stack workflow id
          command: |
            # Fetch the Old workflow ID
            export OldWorkflowID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)
            echo OldWorkflowID: "${OldWorkflowID}"
            echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
            # Fetch the stack names
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
              --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
            echo Stack names: "${STACKS[@]}"
      - run:
          name: Remove old stacks and files
          command: |
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              echo "************* Delete Confirmed *************"
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            else
              echo "************* Cannot Delete Stacks *************"
            fi


workflows:
  default:
    jobs:
      - build-frontend:
          filters:
            branches:
              only: [test-feature-branch]
      - build-backend:
          filters:
            branches:
              only: [test-feature-branch]
      - test-frontend:
          requires: [build-frontend]
          filters:
            branches:
              only: [test-feature-branch]
      - test-backend:
          requires: [build-backend]
          filters:
            branches:
              only: [test-feature-branch]
      - scan-frontend:
          requires: [build-frontend]
          filters:
            branches:
              only: [test-feature-branch]
      - scan-backend:
          requires: [build-backend]
          filters:
            branches:
              only: [test-feature-branch]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [test-feature-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
          filters:
            branches:
              only: [test-feature-branch]
      - run-migrations:
          requires: [configure-infrastructure]
          filters:
            branches:
              only: [test-feature-branch]
      - deploy-frontend:
          requires: [run-migrations]
          filters:
            branches:
              only: [test-feature-branch]
      - deploy-backend:
            requires: [run-migrations]
            filters:
              branches:
                only: [test-feature-branch]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
          filters:
            branches:
              only: [test-feature-branch]
      - cloudfront-update:
          requires: [smoke-test]
          filters:
            branches:
              only: [test-feature-branch]
      # - cleanup:
      #     requires: [cloudfront-update]
      #     filters:
      #       branches:
      #         only: [test-feature-branch]